package main

import (
 "fmt"
 "math/rand"
 "time"
)

type request struct {
 id   int
 done chan string
}

func backend(name string, in <-chan request) {
 for r := range in {
  time.Sleep(time.Duration(rand.Intn(200)+50) * time.Millisecond)
  r.done <- fmt.Sprintf("req #%d handled by %s", r.id, name)
 }
}

func main() {

 rand.Seed(time.Now().UnixNano())

 b1 := make(chan request)
 b2 := make(chan request)
 b3 := make(chan request)

 go backend("svc-1", b1)
 go backend("svc-2", b2)
 go backend("svc-3", b3)


 reqs := make([]request, 0, 9)
 for i := 1; i <= 9; i++ {
  reqs = append(reqs, request{id: i, done: make(chan string)})
 }

 go func(reqs []request) {
  targets := []chan request{b1, b2, b3}
  i := 0
  for _, r := range reqs {
   targets[i] <- r
   i = (i + 1) % len(targets)
  }
 }(reqs)


 for _, r := range reqs {
  fmt.Println(<-r.done)
 }

 close(b1)
 close(b2)
 close(b3)
}
